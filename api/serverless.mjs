var T=Object.create;var E=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var f=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,n)=>(typeof require<"u"?require:t)[n]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var b=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var C=(e,t,n,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of k(t))!$.call(e,r)&&r!==n&&E(e,r,{get:()=>t[r],enumerable:!(s=O(t,r))||s.enumerable});return e};var A=(e,t,n)=>(n=e!=null?T(j(e)):{},C(t||!e||!e.__esModule?E(n,"default",{value:e,enumerable:!0}):n,e));var _=b((re,L)=>{L.exports={name:"dotenv",version:"16.3.1",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},funding:"https://github.com/motdotla/dotenv?sponsor=1",keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3",decache:"^4.6.1",sinon:"^14.0.1",standard:"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0",tap:"^16.3.0",tar:"^6.1.11",typescript:"^4.8.4"},engines:{node:">=12"},browser:{fs:!1}}});var I=b((oe,l)=>{"use strict";var w=f("fs"),v=f("path"),P=f("os"),F=f("crypto"),K=_(),h=K.version,U=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function Y(e){let t={},n=e.toString();n=n.replace(/\r\n?/mg,`
`);let s;for(;(s=U.exec(n))!=null;){let r=s[1],o=s[2]||"";o=o.trim();let i=o[0];o=o.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),i==='"'&&(o=o.replace(/\\n/g,`
`),o=o.replace(/\\r/g,"\r")),t[r]=o}return t}function S(e){let t=x(e),n=a.configDotenv({path:t});if(!n.parsed)throw new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);let s=D(e).split(","),r=s.length,o;for(let i=0;i<r;i++)try{let c=s[i].trim(),u=M(n,c);o=a.decrypt(u.ciphertext,u.key);break}catch(c){if(i+1>=r)throw c}return a.parse(o)}function q(e){console.log(`[dotenv@${h}][INFO] ${e}`)}function B(e){console.log(`[dotenv@${h}][WARN] ${e}`)}function g(e){console.log(`[dotenv@${h}][DEBUG] ${e}`)}function D(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function M(e,t){let n;try{n=new URL(t)}catch(c){throw c.code==="ERR_INVALID_URL"?new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development"):c}let s=n.password;if(!s)throw new Error("INVALID_DOTENV_KEY: Missing key part");let r=n.searchParams.get("environment");if(!r)throw new Error("INVALID_DOTENV_KEY: Missing environment part");let o=`DOTENV_VAULT_${r.toUpperCase()}`,i=e.parsed[o];if(!i)throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);return{ciphertext:i,key:s}}function x(e){let t=v.resolve(process.cwd(),".env");return e&&e.path&&e.path.length>0&&(t=e.path),t.endsWith(".vault")?t:`${t}.vault`}function W(e){return e[0]==="~"?v.join(P.homedir(),e.slice(1)):e}function G(e){q("Loading env from encrypted .env.vault");let t=a._parseVault(e),n=process.env;return e&&e.processEnv!=null&&(n=e.processEnv),a.populate(n,t,e),{parsed:t}}function J(e){let t=v.resolve(process.cwd(),".env"),n="utf8",s=!!(e&&e.debug);e&&(e.path!=null&&(t=W(e.path)),e.encoding!=null&&(n=e.encoding));try{let r=a.parse(w.readFileSync(t,{encoding:n})),o=process.env;return e&&e.processEnv!=null&&(o=e.processEnv),a.populate(o,r,e),{parsed:r}}catch(r){return s&&g(`Failed to load ${t} ${r.message}`),{error:r}}}function Q(e){let t=x(e);return D(e).length===0?a.configDotenv(e):w.existsSync(t)?a._configVault(e):(B(`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`),a.configDotenv(e))}function H(e,t){let n=Buffer.from(t.slice(-64),"hex"),s=Buffer.from(e,"base64"),r=s.slice(0,12),o=s.slice(-16);s=s.slice(12,-16);try{let i=F.createDecipheriv("aes-256-gcm",n,r);return i.setAuthTag(o),`${i.update(s)}${i.final()}`}catch(i){let c=i instanceof RangeError,u=i.message==="Invalid key length",p=i.message==="Unsupported state or unable to authenticate data";if(c||u){let m="INVALID_DOTENV_KEY: It must be 64 characters long (or more)";throw new Error(m)}else if(p){let m="DECRYPTION_FAILED: Please check your DOTENV_KEY";throw new Error(m)}else throw console.error("Error: ",i.code),console.error("Error: ",i.message),i}}function z(e,t,n={}){let s=!!(n&&n.debug),r=!!(n&&n.override);if(typeof t!="object")throw new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");for(let o of Object.keys(t))Object.prototype.hasOwnProperty.call(e,o)?(r===!0&&(e[o]=t[o]),s&&g(r===!0?`"${o}" is already defined and WAS overwritten`:`"${o}" is already defined and was NOT overwritten`)):e[o]=t[o]}var a={configDotenv:J,_configVault:G,_parseVault:S,config:Q,decrypt:H,parse:Y,populate:z};l.exports.configDotenv=a.configDotenv;l.exports._configVault=a._configVault;l.exports._parseVault=a._parseVault;l.exports.config=a.config;l.exports.decrypt=a.decrypt;l.exports.parse=a.parse;l.exports.populate=a.populate;l.exports=a});import ee from"@fastify/cors";import Z from"fastify";var R=A(I(),1);var X=async(e,t)=>{let{timeout:n=5e3}=t||{},s=new AbortController;setTimeout(()=>s.abort(),n);try{return await fetch(e,{...t,signal:s.signal})}catch(r){throw r instanceof DOMException&&r.name==="AbortError"?new Error("Fetch timeout"):r}},y=(e,t)=>{let{timeout:n=17e3,maxRetryCount:s=0}=t||{};return new Promise((r,o)=>{let i=0,c=()=>{X(e,{...t,timeout:n}).then(p=>{r(p)}).catch(p=>{console.error(p,i>=s?"Abort":"Continue",i),i++,i<=s?c():o("All retries failed.")})};c()})};R.config();var N=process.env.PUBLIC_API_URL?process.env.PUBLIC_API_URL:"http://localhost:5050",V=(e,t,n)=>{e.get("/api/health",async()=>await y(`${N}/api/health`,{method:"GET",timeout:1e3,maxRetryCount:0}).then(()=>!0).catch(()=>!1)),e.post("/api/parse",async s=>{let r=JSON.stringify(s.body);return await y(`${N}/api/parse`,{method:"POST",timeout:5e3,maxRetryCount:0,headers:{"Content-Type":"application/json"},body:r}).then(i=>i.json()).catch(()=>!1)}),n()};var d=Z({logger:!0});d.register(V);await d.register(ee,{origin:/\.vercel\.app$/});async function te(e,t){await d.ready(),d.server.emit("request",e,t)}export{te as default};
